import org.apache.spark.ml.regression.LinearRegression

import org.apache.spark.sql.SparkSession

import spark.implicits._

import org.apache.log4j._

Logger.getLogger("org").setLevel(Level.ERROR)

val spark = SparkSession.builder().appName("Practice1").master("local")getOrCreate()

val path = "C:/Users/aide0/OneDrive/Escritorio/BigData-master/Spark_LogisticRegression/Clean-Ecommerce.csv"

val cleanE = spark.read.option("header", "true").option("inferSchema","true")csv(path)

cleanE.printSchema

cleanE.show(1)

Configuraci√≥n del DataFrame para Machine Learning:

import org.apache.spark.ml.feature.VectorAssembler

import org.apache.spark.ml.linalg.Vectors

val df = cleanE.select($"Avg Session Length", $"Time on App", $"Time on Website", $"Length of Membership", $"Yearly Amount Spent".as("label"))

val assembler = new VectorAssembler().setInputCols(Array("Avg Session Length","Time on App","Time on Website","Length of Membership")).setOutputCol("features")

val dataf2 = assembler.transform(df).select($"label", $"features")
dataf2.show()

val lr = new LinearRegression()

val lrModel = lr.fit(output)

val trainingSummary = lrModel.summary

println(s"Coefficients: ${lrModelo.coefficients} Intercept: ${lrModelo.intercept}")

trainingSummary.residuals.show()

println(s"RMSE: ${trainingSummary.rootMeanSquaredError}")

println(s"r2: ${trainingSummary.r2}")

